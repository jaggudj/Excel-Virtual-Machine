GlobalParse
  [DeclareHelper
     [Declare ("main",Function2 Int);
      Assign
        (Value (Var ("main",Function2 Int)),
         Function
           ([],
            Block
              [DeclareHelper
                 [Declare ("n",Ptr Int);
                  Assign
                    (Value (Var ("n",T (0,[Byte; Int; Int64; ... ]))),
                     Apply
                       (Value (Var ("\stack_alloc",Function ([Int],Ptr Int))),
                        [Value (Lit ("10",Int))]))];
               DeclareHelper [Declare ("i",Int); Declare ("j",Int)];
               Block
                 [Assign
                    (Value (Var ("i",T (0,[Byte; Int; Int64; ... ]))),
                     Value (Lit ("0",Int)));
                  While
                    (Apply
                       (Value
                          (Var
                             ("<",
                              Function
                                ([T (0,Value is not created.);
                                  T (0,[Byte; Int; Int64; ... ])],Byte))),
                        [Value (Var ("i",T (0,[Byte; Int; Int64; ... ])));
                         Value (Lit ("10",Int))]),
                     Block
                       [Assign
                          (Index
                             (Value (Var ("n",T (0,[Byte; Int; Int64; ... ]))),
                              Value (Var ("i",T (0,[Byte; Int; Int64; ... ])))),
                           Apply
                             (Value
                                (Var
                                   ("+",
                                    Function
                                      ([T (0,Value is not created.);
                                        T (0,[Byte; Int; Int64; ... ])],
                                       T (0,[Byte; Int; Int64; ... ])))),
                              [Value (Var ("i",T (0,[Byte; Int; Int64; ... ])));
                               Value (Lit ("100",Int))]));
                        Apply
                          (Value (Var ("-",T (0,[Byte; Int; Int64; ... ]))),
                           [Assign
                              (Value (Var ("i",T (0,[Byte; Int; Int64; ... ]))),
                               Apply
                                 (Value
                                    (Var ("+",T (0,[Byte; Int; Int64; ... ]))),
                                  [Value
                                     (Var ("i",T (0,[Byte; Int; Int64; ... ])));
                                   Value (Lit ("1",Int))]));
                            Value (Lit ("1",Int))])])];
               Block
                 [Assign
                    (Value (Var ("j",T (0,[Byte; Int; Int64; ... ]))),
                     Value (Lit ("0",Int)));
                  While
                    (Apply
                       (Value
                          (Var
                             ("<",
                              Function
                                ([T (0,Value is not created.);
                                  T (0,[Byte; Int; Int64; ... ])],Byte))),
                        [Value (Var ("j",T (0,[Byte; Int; Int64; ... ])));
                         Value (Lit ("10",Int))]),
                     Block
                       [Apply
                          (Value (Var ("printf",T (0,[Byte; Int; Int64; ... ]))),
                           [Value (Lit (""Element[%d] = %d\n"",Ptr Byte));
                            Value (Var ("j",T (0,[Byte; Int; Int64; ... ])));
                            Index
                              (Value (Var ("n",T (0,[Byte; Int; Int64; ... ]))),
                               Value (Var ("j",T (0,[Byte; Int; Int64; ... ]))))]);
                        Apply
                          (Value (Var ("-",T (0,[Byte; Int; Int64; ... ]))),
                           [Assign
                              (Value (Var ("j",T (0,[Byte; Int; Int64; ... ]))),
                               Apply
                                 (Value
                                    (Var ("+",T (0,[Byte; Int; Int64; ... ]))),
                                  [Value
                                     (Var ("j",T (0,[Byte; Int; Int64; ... ])));
                                   Value (Lit ("1",Int))]));
                            Value (Lit ("1",Int))])])];
               Return (Value (Lit ("0",Int)))]))]]